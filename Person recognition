import os
from imageai.Detection import ObjectDetection
from skimage.measure import compare_ssim as ssim
import matplotlib.pyplot as plt
import numpy as np
import cv2

exe_path = os.getcwd()
recognize = ObjectDetection() #Object detection function

#Tained model of RetinaNet

recognize.setModelTypeAsRetinaNet()
recognize.setModelPath( os.path.join(exe_path , "resnet50_coco_best_v2.0.1.h5"))
recognize.loadModel()

#Detecting the objects from the image and printing it out into a new file

cust_obj = recognize.CustomObjects(person=True, car=False)
detections = recognize.detectCustomObjectsFromImage(input_image=os.path.join(exe_path ,"image.png"),
                                                   output_image_path=os.path.join(exe_path,"image_new.png"),
                                                   custom_objects=cust_obj, minimum_percentage_probability=75)

#Printing out the accuracy of the object detected from the image

for eachObject in detections:
   print(eachObject["name"] + " : " + eachObject["percentage_probability"] )
   
#Displaying the newly formed image

from IPython.display import Image
Image("image_new.png")

def mse(imageA, imageB):
    err = np.sum((imageA.astype("float") - imageB.astype("float")) ** 2)
    err /= float(imageA.shape[0] * imageA.shape[1])
    return err
 
def compare_images(imageA, imageB, title):
    m = mse(imageA, imageB)
    s = ssim(imageA, imageB)
 
    fig = plt.figure(title)
    plt.suptitle("MSE: %.2f, SSIM: %.2f" % (m, s))
    
    ax = fig.add_subplot(1, 2, 1)
    plt.imshow(imageA, cmap = plt.cm.gray)
    plt.axis("off")
    
    ax = fig.add_subplot(1, 2, 2)
    plt.imshow(imageB, cmap = plt.cm.gray)
    plt.axis("off")
    
    plt.show()
    
# load the images
original = cv2.imread("image_original.png")
contrast = cv2.imread("image_contrast.png")
shopped = cv2.imread("image_photoshopped.png")
 
# convert the images to grayscale
original = cv2.cvtColor(original, cv2.COLOR_BGR2GRAY)
contrast = cv2.cvtColor(contrast, cv2.COLOR_BGR2GRAY)
shopped = cv2.cvtColor(shopped, cv2.COLOR_BGR2GRAY)

# initialize the figure
fig = plt.figure("Images")
images = ("Original", original), ("position_changed", contrast), ("position_changed2", shopped)
 
# loop over the images
for (i, (name, image)) in enumerate(images):
    ax = fig.add_subplot(1, 3, i + 1)
    ax.set_title(name)
    plt.imshow(image, cmap = plt.cm.gray)
    plt.axis("off")

plt.show()
 
# compare the images
compare_images(original, original, "image_original vs. image_original")
compare_images(original, contrast, "image_original vs. position_changed")
compare_images(original, shopped, "image_original vs. position_changed2")
